import Head from 'next/head'
import { Calendar, DatePicker } from "@mantine/dates"
import { useState } from 'react'
import { Timestamp, addDoc, collection, deleteDoc, doc, getFirestore, query, where } from "firebase/firestore";
import { app } from '@/lib/firebase';
import { getAuth } from 'firebase/auth';
import { useAuthState } from 'react-firebase-hooks/auth';
import { Popover } from '@mantine/core';
import { useCollection, useCollectionData } from "react-firebase-hooks/firestore"
const colorCode = {
    "Juan Dharmananda Khusuma": "bg-[#f66]",
    "Eowyn": "bg-[#ff5]",
    "Michelle Vesakha Lauren": "bg-[#6f6]",
    "Venedict Chen": "bg-[#66f]",
    "Ellen Ashiana Djojo": "bg-[#f6f]"

}

const db = getFirestore(app)
interface Holiday {
    event: string;
    when: Timestamp;
    handler: string;
}

export default function Holiday() {
    const [value, setValue] = useState<Date | null>(new Date('2023-01-01'))
    const auth = getAuth(app)
    const [user] = useAuthState(auth)
    const [event, setEvent] = useState("")
    const [handler, setHandler] = useState("")
    const [when, setWhen] = useState<Date | null>()
    const [loading, setLoading] = useState(false)
    const [snapshot] = useCollectionData(collection(db, 'holiday'))
    const [name, setName] = useState("")
    const [taskSnapshot] = useCollection(
        query(collection(db, 'holiday'), where('handler', '==', name)),
        { snapshotListenOptions: { includeMetadataChanges: true } }
    )

    return (
        <>
            <Head>
                <title>Informasi Hari Besar</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            {user && <main className='p-5'>
                <h1 className='mt-5 text-2xl font-bold text-center'>Sistem Informasi Multimedia KMBUI</h1>
                <div className='grid w-full mt-5 place-items-center'>
                    <p className='text-lg mt-3font-semibold text-[#444]'>Informasi Hari Besar</p>
                    <p className='text-base mt-1 mb-3 font-semibold text-[#444]'>Silahkan lihat jadwal upload</p>
                    <Calendar
                        value={value}
                        onChange={setValue}
                        renderDay={(date) => {
                            const day = date.getDate();
                            const holidays = snapshot?.filter((s) =>
                                new Date(s.when.seconds * 1000).toLocaleDateString() === date.toLocaleDateString()
                            )

                            return (
                                <div key={date.toLocaleDateString()}>
                                    <Popover position="bottom" withArrow shadow="md">
                                        <Popover.Target>
                                            <p className={holidays && holidays.length > 0 ? colorCode[(holidays[0] as unknown as Holiday).handler as keyof typeof colorCode] : ''}>{day}</p>
                                        </Popover.Target>
                                        <Popover.Dropdown>
                                            {
                                                holidays && holidays.length > 0 ?
                                                    <ul className='text-black'>
                                                        {holidays.map((ev: any, id: number) => <li className='flex items-center justify-between gap-x-5' key={id}>
                                                            <span className='font-bold'>{ev.event}</span>
                                                            <span className='text-[#444]'>{ev.handler}</span>
                                                        </li>)}
                                                    </ul>
                                                    :
                                                    <p className='text-[#444]'>No Event</p>
                                            }
                                        </Popover.Dropdown>
                                    </Popover>
                                </div>
                            );
                        }}
                    />
                </div>
                <div className='grid mt-10 mb-20 place-items-center'>
                    <h1 className='mb-3 font-bold text-center'>Lihat Tugas Upload</h1>
                    <div className='flex flex-col my-3'>
                        <label className='text-sm font-bold mb-2 text-[#444]' htmlFor="handler">Staff</label>
                        <select name="handler" onChange={(e) => setName(e.target.value)} className={'w-full px-2 py-1 border border-[#444] ' + colorCode[name as keyof typeof colorCode]}>
                            <option className={'font-mono'} value="" selected disabled></option>
                            <option className={'font-mono ' + colorCode["Juan Dharmananda Khusuma"]} value="Juan Dharmananda Khusuma">Juan Dharmananda Khusuma</option>
                            <option className={'font-mono ' + colorCode["Eowyn"]} value="Eowyn">Eowyn</option>
                            <option className={'font-mono ' + colorCode["Michelle Vesakha Lauren"]} value="Michelle Vesakha Lauren">Michelle Vesakha Lauren</option>
                            <option className={'font-mono ' + colorCode["Venedict Chen"]} value="Venedict Chen">Venedict Chen</option>
                            <option className={'font-mono ' + colorCode["Ellen Ashiana Djojo"]} value="Ellen Ashiana Djojo">Ellen Ashiana Djojo</option>
                        </select>
                    </div>
                    {taskSnapshot && taskSnapshot.docs.length === 0 ?
                        <p className='text-[#444]'>No Task</p> :
                        <ul>
                            {taskSnapshot?.docs?.map((t, id) => {
                                const task = t.data()
                                return (
                                    <li className='relative flex items-center justify-between w-full p-2 mb-3 border border-black gap-x-5' key={id}>
                                        <div className='flex items-center justify-between w-full'>
                                            <span className='w-1/2 mr-4 text-sm font-bold'>{task.event}</span>
                                            <span className='text-[#444]'>{task.when.toDate().toLocaleDateString()}</span>
                                        </div>
                                        <div onClick={async () => {
                                            await deleteDoc(doc(db, 'holiday', t.id))
                                        }} className='px-2 py-1 font-mono text-sm font-bold text-white bg-red-600 cursor-pointer'>Delete</div>
                                    </li>
                                )
                            })}
                        </ul>
                    }
                </div>
                <div className='grid w-full mt-10 mb-20 place-items-center'>
                    <h1 className='mb-3 font-bold text-center'>Input Tugas Upload Hari Besar</h1>
                    <form className='' onSubmit={async (e) => {
                        e.preventDefault();
                        setLoading(true)
                        try {
                            await addDoc(collection(db, 'holiday'), {
                                event,
                                handler,
                                when: Timestamp.fromDate(when as Date)
                            });
                            setEvent("")
                            setHandler("")
                            setWhen(new Date())
                        } catch (err) { console.log(err) }
                        finally {
                            setLoading(false)
                        }
                    }}>
                        <div className='flex flex-col my-3'>
                            <label className='text-sm font-bold mb-2 text-[#444]' htmlFor="event">Nama Hari Besar</label>
                            <input value={event} onChange={e => setEvent(e.target.value)} className='px-2 py-1 border border-[#444]' type="text" name="event" id="" />
                        </div>
                        <div className='flex flex-col my-3'>
                            <label className='text-sm font-bold mb-2 text-[#444]' htmlFor="handler">Staff</label>
                            <select name="handler" onChange={(e) => setHandler(e.target.value)} className='w-full px-2 py-1 border border-[#444]'>
                                <option className='font-mono' value="" selected disabled></option>
                                <option className='font-mono' value="Juan Dharmananda Khusuma">Juan Dharmananda Khusuma</option>
                                <option className='font-mono' value="Eowyn">Eowyn</option>
                                <option className='font-mono' value="Michele Vesakha Lauren">Michele Vesakha Lauren</option>
                                <option className='font-mono' value="Venedict Chen">Venedict Chen</option>
                                <option className='font-mono' value="Ellena Ashiana Djojo">Ellena Ashiana Djojo</option>
                            </select>
                        </div>
                        <DatePicker value={when} onChange={e => setWhen(e)} placeholder="Pick date" label="Event date" withAsterisk />
                        <input type="submit" disabled={loading} value={loading ? "Loading..." : "Submit"} className='w-full py-2 mt-5 font-mono font-bold text-white bg-blue-600 cursor-pointer' />
                    </form>
                </div>
            </main>}
        </>
    )
}
