import Head from 'next/head'
import { Calendar } from "@mantine/dates"
import React, { Suspense, useEffect, useState } from 'react'
import { collection, getDocs, getFirestore, query, where } from "firebase/firestore";
import { app } from '@/lib/firebase';
import { getAuth } from 'firebase/auth';
import { useAuthState } from 'react-firebase-hooks/auth';
import { Popover, Loader } from '@mantine/core';

const db = getFirestore(app)
const uploadRef = collection(db, "upload")

interface Task {
  subject: string;
  caption: string;
  username: string;
  when: {
    seconds: number;
    nanoseconds: number;
  };
  imageURL?: string;
  id: string;
}

export default function Home() {
  const [value, setValue] = useState<Date | null>()
  const auth = getAuth(app)
  const [user] = useAuthState(auth)
  const [data, setData] = useState<Record<string, Task[]>>({})
  const [month, setMonth] = useState<Date>(new Date(Date.now() + 24 * 3600 * 1000))

  useEffect(() => {
    const q = query(collection(db, 'upload'))
    getDocs(q).then(res => {
      const i: Record<string, Task[]> = {};
      const docs = res.docs.map(doc => doc.data())
      docs.forEach(doc => {
        i[new Date(doc.when.seconds * 1000).toLocaleDateString()] = [
          ...(i[new Date(doc.when.seconds * 1000).toLocaleDateString()] as Task[] || []),
          (doc as Task)
        ]
      })
      setData(i)
    })
  }, [])

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1 className='text-2xl font-bold'>Coming Soon</h1>
      {user && <main className='p-5'>
        <h1 className='mt-5 text-2xl font-bold text-center'>Sistem Informasi Multimedia KMBUI</h1>
        <div className='grid w-full mt-5 place-items-center'>
          <p className='text-lg mt-3font-semibold text-[#444]'>Silahkan buat request tag jarkom</p>
          <p className='text-base mt-1 mb-3 font-semibold text-[#444]'>Pilih jadwal posting</p>
          <Calendar
            value={value}
            onChange={setValue}
            // excludeDate={(date) => date.valueOf() < Date.now()}
            initialMonth={month}
            renderDay={(date) => {
              const day = date.getDate();
              const task = data[date.toLocaleDateString()]

              return (
                <div key={date.toLocaleDateString()}>
                  <Popover position="bottom" withArrow shadow="md">
                    <Popover.Target>
                      <p>{day}</p>
                    </Popover.Target>
                    <Popover.Dropdown>
                      {
                        task ? <ul>
                          {task.map((t, id) => (
                            <li key={id}>
                              <span className='mr-2 font-bold text-black'>{t.subject}</span>
                              <span className='text-[#444]'>{new Date(t.when.seconds * 1000).toLocaleTimeString()}</span>
                            </li>
                          ))}
                        </ul> :
                          <p className='text-[#444]'>No upload task</p>
                      }
                    </Popover.Dropdown>
                  </Popover>
                </div>
              );
            }}
          />
        </div>
      </main>}
    </>
  )
}
